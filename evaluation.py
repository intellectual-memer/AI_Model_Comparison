from bert_score import score

def evaluate_answers(ground_truth, deepseek_answer, openai_answer):
    """
    Evaluate answers from DeepSeek-R1 and OpenAI-o1 using BERTScore.

    Args:
        ground_truth: The true answer for the query.
        deepseek_answer: The answer generated by DeepSeek-R1.
        openai_answer: The answer generated by OpenAI-o1.

    Returns:
        A dictionary containing evaluation scores.
    """
    # Compute BERTScore
    P_deepseek, R_deepseek, F_deepseek = score([deepseek_answer], [ground_truth], lang="en", verbose=False)
    P_openai, R_openai, F_openai = score([openai_answer], [ground_truth], lang="en", verbose=False)

    # Format results
    results = {
        "DeepSeek-R1": {
            "Precision": round(P_deepseek[0].item(), 4),
            "Recall": round(R_deepseek[0].item(), 4),
            "F1": round(F_deepseek[0].item(), 4),
        },
        "OpenAI-o1": {
            "Precision": round(P_openai[0].item(), 4),
            "Recall": round(R_openai[0].item(), 4),
            "F1": round(F_openai[0].item(), 4),
        },
    }
    return results

# def evaluate_batch(ground_truths, deepseek_answers, openai_answers):
#     """
#     Evaluate a batch of queries and their answers.

#     Args:
#         ground_truths: A list of true answers for each query.
#         deepseek_answers: A list of answers generated by DeepSeek-R1.
#         openai_answers: A list of answers generated by OpenAI-o1.

#     Returns:
#         A list of dictionaries containing evaluation scores for each query.
#     """
#     results = []
#     for i in range(len(ground_truths)):
#         # Evaluate each answer pair
#         result = evaluate_answers(ground_truths[i], deepseek_answers[i], openai_answers[i])
#         results.append({
#             "query_index": i + 1,  # Add query index for clarity
#             "ground_truth": ground_truths[i],
#             "DeepSeek-R1 Answer": deepseek_answers[i],
#             "OpenAI-o1 Answer": openai_answers[i],
#             "Evaluation": result
#         })
#     return results
